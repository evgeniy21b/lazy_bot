import asyncio
import logging
from typing import Optional, Dict, Any
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.exceptions import TelegramAPIError
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from db_manager import DatabaseManager, Task

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("bot.main")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TaskStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_deletion = State()
    waiting_for_completion = State()

class BotManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, token: str, db: DatabaseManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.token = token
        self.bot = Bot(token=token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.db = db
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.dp.message.register(self.cmd_start, Command(commands=["start"]))
        self.dp.message.register(self.cmd_help, Command(commands=["help"]))
        self.dp.message.register(self.cmd_new, Command(commands=["new"]))
        self.dp.message.register(self.cmd_tasks, Command(commands=["tasks"]))
        self.dp.message.register(self.cmd_delete, Command(commands=["delete"]))
        self.dp.message.register(self.cmd_complete, Command(commands=["complete"]))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp.message.register(self.process_task_title, TaskStates.waiting_for_title)
        self.dp.message.register(self.process_task_description, TaskStates.waiting_for_description)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.process_callback)
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def cmd_start(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.add_user(user_id, username)
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id})")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É",
                callback_data="create_task"
            ))
            builder.add(types.InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
                callback_data="list_tasks"
            ))
            builder.add(types.InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data="delete_task"
            ))
            builder.add(types.InlineKeyboardButton(
                text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é",
                callback_data="complete_task"
            ))
            builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
            
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, @{username}!\n\n"
                "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                "üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏\n"
                "üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                "‚ùå –£–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏\n"
                "‚úÖ –û—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/new - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
                "/tasks - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                "/delete - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                "/complete - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
                "/help - –ø–æ–º–æ—â—å",
                reply_markup=builder.as_markup()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def cmd_help(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
            "/tasks - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
            "/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
            "/complete - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)"
        )
        await message.answer(help_text)
    
    async def cmd_new(self, message: types.Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            
            await state.set_state(TaskStates.waiting_for_title)
            await message.answer(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def process_task_title(self, message: types.Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            title = message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task_id = self.db.add_task(user_id, title)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å ID {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
            await state.set_state(TaskStates.waiting_for_description)
            await message.answer(
                "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
    
    async def process_task_description(self, message: types.Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            
            if message.text == "/skip":
                description = None
            else:
                description = message.text
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = self.db.conn.cursor()
            cursor.execute(
                "SELECT id FROM tasks WHERE user_id = ? ORDER BY created_at DESC LIMIT 1",
                (user_id,)
            )
            task_id = cursor.fetchone()[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            cursor.execute(
                "UPDATE tasks SET description = ? WHERE id = ? AND user_id = ?",
                (description, task_id, user_id)
            )
            self.db.conn.commit()
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}")
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            await state.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
    
    async def cmd_tasks(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
            tasks = self.db.get_user_tasks(message.from_user.id)
            
            if not tasks:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new")
                return
            
            response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
            for task in tasks:
                task_id, title, description, created_at, status = task
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç
                created_date = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
                status_emoji = "‚úÖ" if status else "‚è≥"
                response += f"{status_emoji} –ó–∞–¥–∞—á–∞ #{task_id}\n"
                response += f"üìå {title}\n"
                if description:
                    response += f"üìù {description}\n"
                response += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_date}\n\n"
            
            await message.answer(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def cmd_delete(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = self.db.conn.cursor()
            cursor.execute(
                "SELECT id, title FROM tasks WHERE user_id = ? ORDER BY created_at DESC",
                (user_id,)
            )
            tasks = cursor.fetchall()
            
            if not tasks:
                await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
            builder = InlineKeyboardBuilder()
            for task_id, title in tasks:
                builder.add(types.InlineKeyboardButton(
                    text=f"‚ùå {title}",
                    callback_data=f"delete_{task_id}"
                ))
            builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def cmd_complete(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /complete"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = self.db.conn.cursor()
            cursor.execute(
                "SELECT id, title FROM tasks WHERE user_id = ? AND status = 0 ORDER BY created_at DESC",
                (user_id,)
            )
            tasks = cursor.fetchall()
            
            if not tasks:
                await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
            builder = InlineKeyboardBuilder()
            for task_id, title in tasks:
                builder.add(types.InlineKeyboardButton(
                    text=f"‚úÖ {title}",
                    callback_data=f"complete_{task_id}"
                ))
            builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:",
                reply_markup=builder.as_markup()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def process_callback(self, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        try:
            data = callback_query.data
            user_id = callback_query.from_user.id
            
            if data == "list_tasks":
                tasks = self.db.get_user_tasks(user_id)
                if not tasks:
                    await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new")
                    return
                
                response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
                for task in tasks:
                    task_id, title, description, created_at, status = task
                    created_date = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
                    status_emoji = "‚úÖ" if status else "‚è≥"
                    response += f"{status_emoji} –ó–∞–¥–∞—á–∞ #{task_id}\n"
                    response += f"üìå {title}\n"
                    if description:
                        response += f"üìù {description}\n"
                    response += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_date}\n\n"
                
                await callback_query.message.answer(response)
            
            elif data == "delete_task":
                tasks = self.db.get_user_incomplete_tasks(user_id)
                if not tasks:
                    await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    return
                
                keyboard = InlineKeyboardBuilder()
                for task_id, title in tasks:
                    keyboard.add(types.InlineKeyboardButton(
                        text=f"‚ùå {title}",
                        callback_data=f"delete_{task_id}"
                    ))
                
                await callback_query.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    reply_markup=keyboard.as_markup()
                )
            
            elif data == "complete_task":
                tasks = self.db.get_user_incomplete_tasks(user_id)
                if not tasks:
                    await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
                    return
                
                keyboard = InlineKeyboardBuilder()
                for task_id, title in tasks:
                    keyboard.add(types.InlineKeyboardButton(
                        text=f"‚úÖ {title}",
                        callback_data=f"complete_{task_id}"
                    ))
                
                await callback_query.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:",
                    reply_markup=keyboard.as_markup()
                )
            
            elif data.startswith("delete_"):
                task_id = int(data.split("_")[1])
                self.db.delete_task(task_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} —É–¥–∞–ª–∏–ª –∑–∞–¥–∞—á—É {task_id}")
                await callback_query.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞")
            
            elif data.startswith("complete_"):
                task_id = int(data.split("_")[1])
                self.db.complete_task(task_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} –æ—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É {task_id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
                await callback_query.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
            
            await callback_query.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback_query.answer()
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

async def main(token: str) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    
    Args:
        token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
    """
    db = DatabaseManager()
    bot_manager = BotManager(token, db)
    await bot_manager.run()

if __name__ == "__main__":
    import asyncio
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    asyncio.run(main(token))