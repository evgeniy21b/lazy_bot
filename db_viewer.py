import sqlite3
from datetime import datetime
from tabulate import tabulate

def view_database():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('tasks.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()

        print("\n=== –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n")

        for table in tables:
            table_name = table[0]
            print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
            print("-" * 50)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = cursor.fetchall()
            column_names = [col[1] for col in columns]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"SELECT * FROM {table_name};")
            rows = cursor.fetchall()

            if rows:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                formatted_rows = []
                for row in rows:
                    formatted_row = list(row)
                    for i, col in enumerate(columns):
                        if col[1] == 'created_at' and row[i]:
                            try:
                                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å timestamp –≤ —á–∏—Ç–∞–µ–º—É—é –¥–∞—Ç—É
                                timestamp = float(row[i])
                                formatted_row[i] = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
                            except (ValueError, TypeError):
                                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                formatted_row[i] = row[i]
                        elif col[1] == 'status' and row[i] is not None:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—Å—Ç
                            formatted_row[i] = '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if row[i] else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'
                    formatted_rows.append(formatted_row)

                # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                print(tabulate(formatted_rows, headers=column_names, tablefmt='grid'))
            else:
                print("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")

            print("\n" + "=" * 50)

        conn.close()

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    view_database() 